#target illustrator/**********************************************************ADOBE SYSTEMS INCORPORATED Copyright 2005-2010 Adobe Systems Incorporated All Rights Reserved NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the termsof the Adobe license agreement accompanying it.  If you have received this file from a source other than Adobe, then your use, modification,or distribution of it requires the prior written permission of Adobe. *********************************************************//********************************************************** Save as PDFs.jsxDESCRIPTIONThis sample gets files specified by the user from the selected folder and batch processes them and saves them as PDFs in the user desired destination with the same file name. **********************************************************/// Main Code [Execution of script begins here]// uncomment to suppress Illustrator warning dialogs// app.userInteractionLevel = UserInteractionLevel.DONTDISPLAYALERTS;var destFolder, sourceFolder, files, fileType, sourceDoc, targetFile, pdfSaveOpts, basePath;// main('~/code/homepage/_courses/me370_2015S/notes')// Select the source folder.thisFile = new File($.fileName); // for the script directory basePath = thisFile.path;// basePath = '~/code/homepage/_courses/me454_2016S/notes'; // for debugging only!Folder.current = basePath;sourceFolder = Folder (basePath + '/temp');// If a valid folder is selectedif ( sourceFolder != null ){	files = new Array();	fileType = String ( '*.ai');		// Get all files matching the pattern	files = sourceFolder.getFiles( fileType );		if ( files.length > 0 )	{		// Get the destination to save the files		destFolder1 = Folder (basePath + '/partial');		destFolder2 = Folder (basePath + '/archive');		for ( i = 0; i < files.length; i++ )        {            sourceDoc = app.open(files[i]); // returns the document object			            pdfSaveOpts = getPDFOptions( ); // get the PDFSaveOptions for the files                         var nLayers = sourceDoc.layers.length; // number of layers in sourceDoc            for ( j = 0; j < nLayers; j++ ) // turn off visibility of certain layers            {                var layerNow = sourceDoc.layers[j];                var layerName = layerNow.name;                if (                   !(                    !("main".localeCompare(layerName)) ||                     !("graphics".localeCompare(layerName)) ||                     !("rules".localeCompare(layerName))                  )                ) // if not layer "main", "graphics", or "rules" (make not visible)                {                  sourceDoc.layers[j].visible = false;                }            }					            targetFile1 = getNewName(destFolder1); // get the name and file to save the pdf            targetFile2 = getNewName(destFolder2); // get the name and file to save the pdf                    writeText = getFilename();            sourceDoc.saveAs( targetFile1, pdfSaveOpts ); // save as pdf                             sourceDoc.layers.getByName('hidden').visible = true;            sourceDoc.saveAs( targetFile2, pdfSaveOpts ); // save as pdf                            sourceDoc.close();        }		// alert( 'Files are saved as PDF in ' + destFolder1 + ' and ' + destFolder2 );	}	else	{		// alert( 'No matching files found' );	}}/*********************************************************main: Function to read the argument passed to this script**********************************************************//*********************************************************getNewName: Function to get the new file name. The primaryname is the same as the source file.**********************************************************/function getNewName( destFolder ){	var ext, docName, newName, saveInFile, docName;	docName = sourceDoc.name;	ext = '.pdf'; // new extension for pdf file	newName = "";			for ( var i = 0 ; docName[i] != "." ; i++ )	{		newName += docName[i];	}	newName += ext; // full pdf name of the file		// Create a file object to save the pdf	saveInFile = new File( destFolder + '/' + newName );		return saveInFile;}/*********************************************************getPDFOptions: Function to set the PDF saving options of the files using the PDFSaveOptions object.**********************************************************/function getPDFOptions(){	// Create the PDFSaveOptions object to set the PDF options	var pdfSaveOpts = new PDFSaveOptions();		// Setting PDFSaveOptions properties. Please see the JavaScript Reference	// for a description of these properties.	// Add more properties here if you like	pdfSaveOpts.acrobatLayers = false;	pdfSaveOpts.colorBars = false;	pdfSaveOpts.colorCompression = CompressionQuality.ZIP8BIT;	pdfSaveOpts.grayscaleCompression = CompressionQuality.ZIP8BIT;	pdfSaveOpts.compressArt = true; //default    pdfSaveOpts.compatibility = PDFCompatibility.ACROBAT6;	// pdfSaveOpts.enablePlainText = true;	pdfSaveOpts.generateThumbnails = true; // default	pdfSaveOpts.optimization = true;    pdfSaveOpts.preserveEditability = false;	// pdfSaveOpts.pDFPreset = "myPartial"; // better not to depend on this being there		// uncomment to view the pdfs after conversion.	pdfSaveOpts.viewAfterSaving = false;		return pdfSaveOpts;}function getFilename()  {      var nAB = app.activeDocument.artboards.length;    // Write text    for (var i = 0; i<nAB; i++) { // loop thru all artboards        var pointTextRef1 = app.activeDocument.textFrames.add();        var pointTextRef2 = app.activeDocument.textFrames.add();        var activeAB = app.activeDocument.artboards[i];        var iartBounds = activeAB.artboardRect;        var fontSize = .5;        var margins = .31*72; // get margins in points        var ableft = iartBounds[0]+margins;        var abtop = iartBounds[1]-margins;        var abright = iartBounds[2]-1.6*margins;        var abbottom = iartBounds[3]+margins+fontSize;        pointTextRef1.contents = app.activeDocument.name;        pointTextRef2.contents = (i+1).toString() + "/" + nAB.toString();        pointTextRef1.left = abright;        pointTextRef1.top = abtop;        pointTextRef2.left = abright-10;        pointTextRef2.top = abtop-18;        pointTextRef1.left = abright;        pointTextRef1.textRange.paragraphAttributes.justification = Justification.RIGHT;        pointTextRef2.textRange.paragraphAttributes.justification = Justification.RIGHT;          app.activeDocument.textFrames[0].textRange.characterAttributes.textFont=app.textFonts[31];    } // end for loop thru all artboards}